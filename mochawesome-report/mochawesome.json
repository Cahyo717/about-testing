{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-09T17:00:40.243Z",
    "end": "2022-12-09T17:00:41.634Z",
    "duration": 1391,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "705396a5-4dd6-4819-ada8-94f74d083c9b",
      "title": "",
      "fullFile": "D:\\tugas-basic-api-intermediate-week-4-fazztrack\\tests\\api_user_update_test.js",
      "file": "\\tests\\api_user_update_test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "65a9dff9-cee2-4ea4-8912-13b3656241b2",
          "title": "User API",
          "fullFile": "D:\\tugas-basic-api-intermediate-week-4-fazztrack\\tests\\api_user_update_test.js",
          "file": "\\tests\\api_user_update_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User API\"",
              "fullTitle": "User API \"before all\" hook in \"User API\"",
              "timedOut": null,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d5baa825-f1e8-4128-af44-1a3d60bb77d2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"User API\"",
              "fullTitle": "User API \"before all\" hook in \"User API\"",
              "timedOut": null,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log(\"before\")",
              "err": {},
              "uuid": "b334abd8-25f5-4c6b-b61b-64193d276dc8",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"User API\"",
              "fullTitle": "User API \"before each\" hook in \"User API\"",
              "timedOut": null,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "// let body = {}\n// Object.assign(body , responseBody);\n// response = await apiUser.postUserCreate(body);\n// expect(response.status).to.equal(200);",
              "err": {},
              "uuid": "938c1833-a8d4-4f09-ac86-a717ea7c1da1",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User API\"",
              "fullTitle": "User API \"after all\" hook in \"User API\"",
              "timedOut": null,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log('after');",
              "err": {},
              "uuid": "60f05aca-da80-4ef6-81b7-cfdc0ba27a95",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"User API\"",
              "fullTitle": "User API \"after each\" hook in \"User API\"",
              "timedOut": null,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log('after Each');",
              "err": {},
              "uuid": "ca6430d4-cbba-4b7a-8340-103c548b92a7",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[@TC1] Success update user",
              "fullTitle": "User API [@TC1] Success update user",
              "timedOut": null,
              "duration": 176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Your scripting code start\nlet body = {}\nObject.assign(body,responseBody);\nbody.occupation = \"Back End Engineer\";\nbody.nationality = \"Indonesia\"\nconst response = await apiUser.postUpdateData(body);\nconsole.log(response);\nexpect(response.status).to.equal(200);\nassert.equal(response.status, 200, 'status code is wrong');\nexpect(response.status).equal(200);",
              "err": {},
              "uuid": "25b1b7cc-1cc5-4fc5-a267-ef5cb106f676",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@TC2] Verify create user API return 400 when using data age <= 0",
              "fullTitle": "User API [@TC2] Verify create user API return 400 when using data age <= 0",
              "timedOut": null,
              "duration": 205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Your scripting code start\nlet body = {}\nObject.assign(body,responseBody);\nbody.age = 0;\nconst response = await apiUser.postUpdateData(body);\nconsole.log(response);\nexpect(response.status).to.equal(400);\nassert.equal(response.status, 400, 'status code is wrong');\nexpect(response.status).equal(400);",
              "err": {},
              "uuid": "49537344-448e-40da-9225-e6400f4c557f",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@TC3] Verify when data array are empty",
              "fullTitle": "User API [@TC3] Verify when data array are empty",
              "timedOut": null,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Your scripting code start\n      let body = {}\n      Object.assign(body,responseBody);\n      body.hobbies = [];\n      const response = await apiUser.postUpdateData(body);\n      console.log(response);\n      expect(response.status).to.equal(400);\n      assert.equal(response.status, 400, 'status code is wrong');\n      expect(response.status).equal(400);\n    //   expect(response.body.message).to.include('you must specify');",
              "err": {},
              "uuid": "0a8b83dc-7e5f-4ed3-b59d-53f1f2c21cb6",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@TC4] Verify when id is null",
              "fullTitle": "User API [@TC4] Verify when id is null",
              "timedOut": null,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Your scripting code start\n      let body = {}\n      Object.assign(body,responseBody);\n      body.id = null;\n      const response = await apiUser.postUpdateData(body);\n      expect(response.status).to.equal(200);\n      assert.equal(response.status, 200, 'status code is wrong');\n      expect(response.status).equal(200);\n    //   expect(response.body.message).to.include('you must specify');",
              "err": {},
              "uuid": "3b87555a-796f-4135-9cb9-8bd8e4be6676",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@TC5]User Using Valid ID",
              "fullTitle": "User API [@TC5]User Using Valid ID",
              "timedOut": null,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let body = {}\nObject.assign(body, responseBody);\nconst response = await apiUser.getUserById('59fc6f6f-d3f3-414d-9c94-fad8d05a976a')\nconsole.log(body)\nexpect(response.status).to.equal(400);\nconsole.log(createUserSchema)\n//logic API get user by ID",
              "err": {},
              "uuid": "25638f39-959c-41e5-8ab5-7ee636dafff4",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@TC6]User using invalid ID",
              "fullTitle": "User API [@TC6]User using invalid ID",
              "timedOut": null,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let body = {}\nObject.assign(body, responseBody);\nconst response = await apiUser.getUserById('a')\nconsole.log(body)\nexpect(response.status).to.equal(400);\nconsole.log(createUserSchema);\n//logic API get user by ID",
              "err": {},
              "uuid": "938c4aa4-4f03-4710-8643-2502b46a5471",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "25b1b7cc-1cc5-4fc5-a267-ef5cb106f676",
            "49537344-448e-40da-9225-e6400f4c557f",
            "0a8b83dc-7e5f-4ed3-b59d-53f1f2c21cb6",
            "3b87555a-796f-4135-9cb9-8bd8e4be6676",
            "25638f39-959c-41e5-8ab5-7ee636dafff4",
            "938c4aa4-4f03-4710-8643-2502b46a5471"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 565,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}