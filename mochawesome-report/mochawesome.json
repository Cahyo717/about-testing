{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-27T11:58:00.803Z",
    "end": "2022-12-27T11:58:01.997Z",
    "duration": 1194,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "19c2aa42-c65c-45d2-9471-b0b56c20aa2c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b9cddd83-e4c3-4030-bb51-8c35c772bb77",
          "title": "User API",
          "fullFile": "D:\\tugas-basic-api-intermediate-week-4-fazztrack\\tests\\api_user_update_test.js",
          "file": "\\tests\\api_user_update_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User API\"",
              "fullTitle": "User API \"before all\" hook in \"User API\"",
              "timedOut": null,
              "duration": 83,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log(\"Before Hook, Post User Data\")\nlet response = await apiUser.createUser(responseBody);\ndataUser.UserID = response.body.id;\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "bdd1fb76-2dde-4129-8800-421bbbae1ca4",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User API\"",
              "fullTitle": "User API \"after all\" hook in \"User API\"",
              "timedOut": null,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log('After Hook,Delete User Data')\nlet response = await apiUser.deleteUser(dataUser.UserID);\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "735610ca-daa2-4d3b-8206-0505d87bc487",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[@TC1] Success update user",
              "fullTitle": "User API [@TC1] Success update user",
              "timedOut": null,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Your scripting code start\nlet response = await apiUser.updateDataUser(dataUser.editData(dataUser.UserID))\nexpect(response.status).to.equal(200);\nexpect(response.body.occupation).not.to.equal(responseBody.occupation);\nexpect(response.body.occupation).not.to.equal(responseBody.occupation);\nexpect(response.body).has.jsonSchema(jsonSchemas.editData);",
              "err": {},
              "uuid": "e880a592-332b-4ed8-a18d-1f018a3d2cad",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@TC2] Verify create user API return 400 when using data age <= 0",
              "fullTitle": "User API [@TC2] Verify create user API return 400 when using data age <= 0",
              "timedOut": null,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Your scripting code start\nlet response = await apiUser.updateDataUser(dataUser.zeroAge);\nexpect(response.status).to.equal(400);\nexpect(response.body.errorCode).to.equal(\"ER-03\");\nexpect(response.body.message).to.equal('you must specify data for firstname, lastName, age, occupation, nationality, hobbies (at least 1), and gender');\nexpect(response.body).has.jsonSchema(jsonSchemas.zeroAge);",
              "err": {},
              "uuid": "2f04c6f8-a803-4ba4-a0e4-982e1290640c",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@TC3] Verify when data array are empty",
              "fullTitle": "User API [@TC3] Verify when data array are empty",
              "timedOut": null,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Your scripting code start\nlet response = await apiUser.updateDataUser(dataUser.emptyArray);\nexpect(response.status).to.equal(400);\nexpect(response.body.errorCode).to.equal(\"ER-03\");\nexpect(response.body.message).to.equal('you must specify data for firstname, lastName, age, occupation, nationality, hobbies (at least 1), and gender');\nexpect(response.body).has.jsonSchema(jsonSchemas.emptyArray);",
              "err": {},
              "uuid": "ab63ba1a-1f38-48a8-a071-9e9fe66981b5",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@TC4] Verify when id is null",
              "fullTitle": "User API [@TC4] Verify when id is null",
              "timedOut": null,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Your scripting code start\nlet response = await apiUser.updateDataUser(dataUser.idIsNull);\nexpect(response.status).to.equal(404);\nexpect(response.body.errorCode).to.equal(\"ER-01\");\nexpect(response.body.message).to.equal(\"user not found\");\nexpect(response.body).has.jsonSchema(jsonSchemas.idIsNull);\n    //   expect(response.body.message).to.include('you must specify');",
              "err": {},
              "uuid": "b9b553a7-384d-4ae5-86d4-e912bfbd9b3c",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e880a592-332b-4ed8-a18d-1f018a3d2cad",
            "2f04c6f8-a803-4ba4-a0e4-982e1290640c",
            "ab63ba1a-1f38-48a8-a071-9e9fe66981b5",
            "b9b553a7-384d-4ae5-86d4-e912bfbd9b3c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 42,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "b67f3034-2698-48bd-bf68-eb1afc4a1d09",
          "title": "[@GetData]Get Data User API",
          "fullFile": "D:\\tugas-basic-api-intermediate-week-4-fazztrack\\tests\\api_user_update_test.js",
          "file": "\\tests\\api_user_update_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"[@GetData]Get Data User API\"",
              "fullTitle": "[@GetData]Get Data User API \"before all\" hook in \"[@GetData]Get Data User API\"",
              "timedOut": null,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log(\"Before Hook, Post User Data\")\nlet response = await apiUser.createUser(responseBody);\ndataUser.UserID = response.body.id;\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "a7dc622b-2071-469a-8fc1-94bf0c9e1b1d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"[@GetData]Get Data User API\"",
              "fullTitle": "[@GetData]Get Data User API \"after all\" hook in \"[@GetData]Get Data User API\"",
              "timedOut": null,
              "duration": 131,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log('After Hook,Delete User Data')\nlet response = await apiUser.deleteUser(dataUser.UserID);\nexpect(response.status).to.equal(200);\nconsole.log(response)",
              "err": {},
              "uuid": "849186db-0805-46a5-8be1-fe356700b363",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[@TC5]User Using Valid ID",
              "fullTitle": "[@GetData]Get Data User API [@TC5]User Using Valid ID",
              "timedOut": null,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await apiUser.getUserById(dataUser.UserID);\nexpect(response.status).to.equal(200);\nexpect(response.body.id).to.equal(dataUser.UserID);\nexpect(response.body).has.jsonSchema(jsonSchemas.getUser);\n//logic API get user by ID",
              "err": {},
              "uuid": "f5185ad3-3cc4-401b-a350-849417ab4b06",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@TC6]User using invalid ID",
              "fullTitle": "[@GetData]Get Data User API [@TC6]User using invalid ID",
              "timedOut": null,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await apiUser.getUserById('error');\nexpect(response.status).to.equal(404);\nexpect(response.body.errorCode).to.equal('ER-01');\nexpect(response.body.message).to.equal('user not found');\nexpect(response.body).has.jsonSchema(jsonSchemas.invalidUserId);\n//logic API get user by ID",
              "err": {},
              "uuid": "478029d6-67ff-4bd3-8cce-de66f4048a3e",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f5185ad3-3cc4-401b-a350-849417ab4b06",
            "478029d6-67ff-4bd3-8cce-de66f4048a3e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}