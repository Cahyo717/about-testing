{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-30T12:44:50.427Z",
    "end": "2022-12-30T12:44:51.924Z",
    "duration": 1497,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9cc3d58c-f3c2-4ca5-bd2a-7aba86ae8633",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c8915a82-52ec-40eb-94e5-3a50a355a71c",
          "title": "User API",
          "fullFile": "D:\\tugas-basic-api-intermediate-week-4-fazztrack\\tests\\api_user_update_test.js",
          "file": "\\tests\\api_user_update_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User API\"",
              "fullTitle": "User API \"before all\" hook in \"User API\"",
              "timedOut": null,
              "duration": 711,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log(\"Before Hook, Post User Data\")\nlet response = await apiUser.createUser(responseBody);\ndataUser.UserID = response.body.id;\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "1d144fec-10dd-4303-95b3-2417fe615c09",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User API\"",
              "fullTitle": "User API \"after all\" hook in \"User API\"",
              "timedOut": null,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log('After Hook,Delete User Data')\nlet response = await apiUser.deleteUser(dataUser.UserID);\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "79a555cd-751e-41b3-b994-200c1e909326",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[@TC1] Success update user",
              "fullTitle": "User API [@TC1] Success update user",
              "timedOut": null,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Your scripting code start\nlet response = await apiUser.updateDataUser(dataUser.editData(dataUser.UserID))\nexpect(response.status).to.equal(200);\nexpect(response.body.occupation).not.to.equal(responseBody.occupation);\nexpect(response.body.occupation).not.to.equal(responseBody.occupation);\nexpect(response.body).has.jsonSchema(jsonSchemas.editData);",
              "err": {},
              "uuid": "1253766f-78ee-498b-966b-5ceebf780785",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@TC2] Verify create user API return 400 when using data age <= 0",
              "fullTitle": "User API [@TC2] Verify create user API return 400 when using data age <= 0",
              "timedOut": null,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Your scripting code start\nlet response = await apiUser.updateDataUser(dataUser.zeroAge);\nexpect(response.status).to.equal(400);\nexpect(response.body.errorCode).to.equal(\"ER-03\");\nexpect(response.body.message).to.equal('you must specify data for firstname, lastName, age, occupation, nationality, hobbies (at least 1), and gender');\nexpect(response.body).has.jsonSchema(jsonSchemas.zeroAge);",
              "err": {},
              "uuid": "2b7e75b0-ad7e-4662-8e91-76f491b96260",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@TC3] Verify when data array are empty",
              "fullTitle": "User API [@TC3] Verify when data array are empty",
              "timedOut": null,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Your scripting code start\nlet response = await apiUser.updateDataUser(dataUser.emptyArray);\nexpect(response.status).to.equal(400);\nexpect(response.body.errorCode).to.equal(\"ER-03\");\nexpect(response.body.message).to.equal('you must specify data for firstname, lastName, age, occupation, nationality, hobbies (at least 1), and gender');\nexpect(response.body).has.jsonSchema(jsonSchemas.emptyArray);",
              "err": {},
              "uuid": "d5afdad2-9bd0-4faf-9156-561efdc0c27f",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@TC4] Verify when id is null",
              "fullTitle": "User API [@TC4] Verify when id is null",
              "timedOut": null,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Your scripting code start\nlet response = await apiUser.updateDataUser(dataUser.idIsNull);\nexpect(response.status).to.equal(404);\nexpect(response.body.errorCode).to.equal(\"ER-01\");\nexpect(response.body.message).to.equal(\"user not found\");\nexpect(response.body).has.jsonSchema(jsonSchemas.idIsNull);\n    //   expect(response.body.message).to.include('you must specify');",
              "err": {},
              "uuid": "c9fda54d-f8ee-402e-b2d1-16dc9aadd03b",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1253766f-78ee-498b-966b-5ceebf780785",
            "2b7e75b0-ad7e-4662-8e91-76f491b96260",
            "d5afdad2-9bd0-4faf-9156-561efdc0c27f",
            "c9fda54d-f8ee-402e-b2d1-16dc9aadd03b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 47,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "0005668c-e4fd-4201-9b40-226cbf11645e",
          "title": "[@GetData]Get Data User API",
          "fullFile": "D:\\tugas-basic-api-intermediate-week-4-fazztrack\\tests\\api_user_update_test.js",
          "file": "\\tests\\api_user_update_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"[@GetData]Get Data User API\"",
              "fullTitle": "[@GetData]Get Data User API \"before all\" hook in \"[@GetData]Get Data User API\"",
              "timedOut": null,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log(\"Before Hook, Post User Data\")\nlet response = await apiUser.createUser(responseBody);\ndataUser.UserID = response.body.id;\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "a4b0af1c-1f18-4944-a73c-82f75f234899",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"[@GetData]Get Data User API\"",
              "fullTitle": "[@GetData]Get Data User API \"after all\" hook in \"[@GetData]Get Data User API\"",
              "timedOut": null,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log('After Hook,Delete User Data')\nlet response = await apiUser.deleteUser(dataUser.UserID);\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "a463b842-189e-4bbd-bdbf-353e925b9f3b",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[@TC5]User Using Valid ID",
              "fullTitle": "[@GetData]Get Data User API [@TC5]User Using Valid ID",
              "timedOut": null,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await apiUser.getUserById(dataUser.UserID);\nexpect(response.status).to.equal(200);\nexpect(response.body.id).to.equal(dataUser.UserID);\nexpect(response.body).has.jsonSchema(jsonSchemas.getUser);\n//logic API get user by ID",
              "err": {},
              "uuid": "6010f382-c23e-4278-8825-21d816151d47",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@TC6]User using invalid ID",
              "fullTitle": "[@GetData]Get Data User API [@TC6]User using invalid ID",
              "timedOut": null,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await apiUser.getUserById('error');\nexpect(response.status).to.equal(404);\nexpect(response.body.errorCode).to.equal('ER-01');\nexpect(response.body.message).to.equal('user not found');\nexpect(response.body).has.jsonSchema(jsonSchemas.invalidUserId);\n//logic API get user by ID",
              "err": {},
              "uuid": "c975ad90-e334-40d4-8219-d8716e938a14",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6010f382-c23e-4278-8825-21d816151d47",
            "c975ad90-e334-40d4-8219-d8716e938a14"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}